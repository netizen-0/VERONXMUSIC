#!/usr/bin/env bash
set -Eeuo pipefail

# ======== AnnieXMusic Setup (stable) ========
# - Debian/Ubuntu apt only
# - Required/optional prompts, clear after config
# - Environment Summary table neatly aligned
# ============================================

IS_TTY=0; [ -t 1 ] && IS_TTY=1
has() { command -v "$1" >/dev/null 2>&1; }

c(){
  if [ "$IS_TTY" -eq 1 ] && has tput; then
    case "$1" in
      bold) tput bold;; dim) tput dim;; ul) tput smul;;
      red) tput setaf 1;; green) tput setaf 2;; yellow) tput setaf 3;;
      blue) tput setaf 4;; magenta) tput setaf 5;; cyan) tput setaf 6;;
      reset) tput sgr0;; *) tput sgr0;;
    esac
  else
    case "$1" in
      bold) printf '\033[1m';; dim) printf '\033[2m';; ul) printf '\033[4m';;
      red) printf '\033[31m';; green) printf '\033[32m';; yellow) printf '\033[33m';;
      blue) printf '\033[34m';; magenta) printf '\033[35m';; cyan) printf '\033[36m';;
      reset) printf '\033[0m';; *) printf '\033[0m';;
    esac
  fi
}

term_width(){ (stty size 2>/dev/null | awk '{print $2}') || echo 100; }
hr(){
  local w
  w="$(term_width)"
  printf "%s\n" "$(c dim)$(printf '─%.0s' $(seq 1 "$w"))$(c reset)"
}

banner(){
  clear
  printf "%s" "$(c magenta)"
  cat <<'EOF'

     _                _        ___           _        _ _
    / \   _ __  _ __ (_) ___  |_ _|_ __  ___| |_ __ _| | | ___ _ __
   / _ \ | '_ \| '_ \| |/ _ \  | || '_ \/ __| __/ _` | | |/ _ \ '__|
  / ___ \| | | | | | | |  __/  | || | | \__ \ || (_| | | |  __/ |
 /_/   \_\_| |_|_| |_|_|\___| |___|_| |_|___/\__\__,_|_|_|\___|_|

EOF
  printf "%s%s%s\n" "$(c bold)" "$(c cyan)A clean, guided setup experience" "$(c reset)"
  hr
}

info(){ printf "  %sℹ%s %s\n" "$(c blue)" "$(c reset)" "$1"; }
warn(){ printf "  %s!%s %s\n"  "$(c yellow)" "$(c reset)" "$1"; }
good(){ printf "  %s✔%s %s\n" "$(c green)" "$(c reset)" "$1"; }
bad(){  printf "  %s✖%s %s\n" "$(c red)"   "$(c reset)" "$1"; }

SCRIPT_DIR="$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" && pwd)"
cd "$SCRIPT_DIR"
trap 'stty sane 2>/dev/null || true' EXIT

LOG_DIR="$SCRIPT_DIR/logs"; mkdir -p "$LOG_DIR"
APTLOG="$LOG_DIR/apt.log"; NODELOG="$LOG_DIR/node.log"; PYLOG="$LOG_DIR/pip.log"

need_sudo(){ info "Elevated permissions may be required."; sudo -v || { bad "sudo unavailable"; exit 1; }; }

update_system(){ info "Updating package lists"; sudo DEBIAN_FRONTEND=noninteractive apt-get update -yq >>"$APTLOG" 2>&1 || true; local upg; upg="$(apt list --upgradable 2>/dev/null | tail -n +2 | wc -l | tr -d ' ')"; if [ "${upg:-0}" -gt 0 ]; then read -r -p "  $(c cyan)Upgrade ${upg} packages? [y/N]$(c reset) " a || true; [[ "$a" =~ ^[Yy]$ ]] && sudo DEBIAN_FRONTEND=noninteractive apt-get upgrade -yq >>"$APTLOG" 2>&1 || true; else good "System is up to date"; fi; }

install_prereqs(){ info "Installing python3, pip, venv, curl, ffmpeg"; sudo apt-get install -yq python3 python3-pip python3-venv curl ffmpeg >>"$APTLOG" 2>&1 || true; if command -v ffmpeg >/dev/null 2>&1; then local maj; maj="$(ffmpeg -version 2>/dev/null | head -n1 | sed -E 's/.*version ([0-9]+).*/\1/')"; if [ -n "${maj:-}" ] && [ "$maj" -lt 4 ]; then warn "ffmpeg < 4 may not support live streams"; else good "ffmpeg version OK"; fi; fi }

install_node(){ if command -v node >/dev/null 2>&1 && command -v npm >/dev/null 2>&1; then info "Node.js present ($(node -v))"; return; fi; info "Installing Node.js LTS"; bash -lc 'curl -fsSL https://deb.nodesource.com/setup_22.x | sudo -E bash -' >>"$NODELOG" 2>&1; sudo apt-get install -yq nodejs >>"$NODELOG" 2>&1; sudo npm i -g npm >>"$NODELOG" 2>&1 || true; }

install_python(){ if [ ! -f requirements.txt ]; then warn "requirements.txt not found — skipping Python deps"; return; fi; python3 -m venv .venv >>"$PYLOG" 2>&1; . ./.venv/bin/activate; python -m pip install -U pip setuptools wheel >>"$PYLOG" 2>&1; pip install -Ur requirements.txt >>"$PYLOG" 2>&1; good "Python deps installed"; }

# ------- Prompts -------
prompt_req(){
  local label="$1" var="$2" val=""
  while :; do
    IFS= read -r -p "  $(c yellow)$label (required): $(c reset)" val || true
    [ -n "$val" ] && break
    printf "  %s!%s required field\n" "$(c yellow)" "$(c reset)"
  done
  printf -v "$var" '%s' "$val"
}

prompt_opt(){
  local label="$1" var="$2" val=""
  IFS= read -r -p "  $(c yellow)$label (optional): $(c reset)" val || true
  printf -v "$var" '%s' "$val"
}

ell(){
  local s="$1" max="$2" n=${#1}
  if [ "$n" -gt "$max" ]; then
    printf "%s…" "${s:0:$((max-1))}"
  else
    printf "%s" "$s"
  fi
}

# ------- Summary Table -------
print_table(){
  local h1="$1" h2="$2"; shift 2
  local rows=("$@") max1=${#h1}
  local r c1 c2
  for r in "${rows[@]}"; do c1="${r%%|*}"; [ ${#c1} -gt $max1 ] && max1=${#c1}; done
  local w right sep1 sep2
  w="$(term_width)"; right=$(( w - max1 - 7 )); [ $right -lt 20 ] && right=20
  sep1="$(printf '─%.0s' $(seq 1 $((max1+2))))"; sep2="$(printf '─%.0s' $(seq 1 $right))"
  printf "%s┌%s┬%s%s\n" "$(c dim)" "$sep1" "$sep2" "$(c reset)"
  printf "│ %-${max1}s │ %s\n" "$(c bold)$h1$(c reset)" "$(c bold)$h2$(c reset)"
  printf "%s├%s┼%s%s\n" "$(c dim)" "$sep1" "$sep2" "$(c reset)"
  for r in "${rows[@]}"; do c1="${r%%|*}"; c2="${r#*|}"; printf "│ %-${max1}s │ %s\n" "$c1" "$(ell "$c2" "$right")"; done
  printf "%s└%s┴%s%s\n" "$(c dim)" "$sep1" "$sep2" "$(c reset)"
}

write_env(){ umask 077; local tmp; tmp="$(mktemp .env.tmp.XXXXXX)"; {
  printf "API_HASH=%s\n"        "$api_hash"
  printf "API_ID=%s\n"          "$api_id"
  printf "API_KEY=%s\n"         "$api_key"
  printf "API_URL=%s\n"         "$api_url"
  printf "BOT_TOKEN=%s\n"       "$bot_token"
  printf "COOKIE_URL=%s\n"      "$cookie_url"
  printf "DEEP_API=%s\n"        "$deep_api"
  printf "LOGGER_ID=%s\n"       "$logger"
  printf "MONGO_DB_URI=%s\n"    "$mongo_db"
  printf "OWNER_ID=%s\n"        "$ownid"
  printf "STRING_SESSION=%s\n"  "$string_session"
} >"$tmp"; mv "$tmp" .env; }

# ------- Flow -------
collect_config(){
  banner
  info "Enter the following values"
  printf "\n"

  prompt_req "API ID" api_id
  prompt_req "API HASH" api_hash
  prompt_req "OWNER ID" ownid
  prompt_req "LOG GROUP ID" logger
  prompt_req "BOT TOKEN" bot_token
  prompt_req "STRING SESSION" string_session
  prompt_req "MONGO DB URI" mongo_db
  prompt_req "COOKIE URL" cookie_url
  prompt_opt "DEEP API" deep_api
  prompt_opt "API_URL"  api_url
  prompt_opt "API_KEY"  api_key

  write_env
  clear
  printf "%sEnvironment Summary%s\n" "$(c bold)" "$(c reset)"; hr
  print_table "Key" "Value" \
    "API_ID|$api_id" \
    "API_HASH|$api_hash" \
    "OWNER_ID|$ownid" \
    "LOGGER_ID|$logger" \
    "BOT_TOKEN|$bot_token" \
    "STRING_SESSION|$string_session" \
    "MONGO_DB_URI|$mongo_db" \
    "COOKIE_URL|$cookie_url" \
    "DEEP_API|$deep_api" \
    "API_URL|$api_url" \
    "API_KEY|$api_key"
}

final_notes(){
  printf "\n"; hr
  good ".env saved successfully"
  info  "Edit: ./.env"
  if [ -x "./start" ] || [ -f "./start.sh" ]; then
    info  "Start the bot: bash start"
  else
    warn  "Start script not found — run your launcher from project root"
  fi
  printf "\nLogs:\n  - %s\n  - %s\n  - %s\n" "$APTLOG" "$NODELOG" "$PYLOG"
  printf "\n%sThank you for using Annie Installer%s\n" "$(c bold)$(c cyan)" "$(c reset)"
}

main(){
  banner
  info "Project: $(basename "$SCRIPT_DIR")"
  need_sudo
  update_system
  install_prereqs
  install_node
  install_python
  collect_config
  final_notes
}

main "$@"